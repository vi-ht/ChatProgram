/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Chatting;

/**
 *
 * @author Thanh Vi
 */
import java.awt.Image;
import java.net.Socket;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextArea; 
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import sun.net.ConnectionResetException;
public class ChatPanel_Server extends javax.swing.JPanel implements Runnable{
      String FileName="";
       Socket socket;
      //BufferedReader bf ;
      //DataOutputStream os ;
      JList<String>display ;
      String sender;
      String receiver;
      Vector<Socket> listSocket;
      Vector<String> Name;
      DefaultListModel<String> model = new DefaultListModel<>();
      Thread t;
      BufferedWriter os=null;
      BufferedReader bf=null;
      int pos=0;
      File file;
     String pathfile="";
      Vector<String> content = null;
      String fSize="";
      public ChatPanel_Server(Socket s, String sender, String receiver,Vector v,Vector n) {
            initComponents();
           this.socket=s;
            this.listSocket=v;
            this.sender=sender;
            this.receiver=receiver;
            int pos = listSocket.indexOf(socket);
            this.Name=n;
            try {
                  bf=new BufferedReader(new InputStreamReader(socket.getInputStream()));
                  os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            } catch (Exception e) {
            }
      }

      public  JTextPane getTxtMessageV(){
           return this.txtMessageV;
     }

      /**
       * This method is called from within the constructor to initialize the
       * form. WARNING: Do NOT modify this code. The content of this method is
       * always regenerated by the Form Editor.
       */
      @SuppressWarnings("unchecked")
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
      private void initComponents() {

            jMenuItem1 = new javax.swing.JMenuItem();
            jScrollPane4 = new javax.swing.JScrollPane();
            Mess = new javax.swing.JTextArea();
            send = new javax.swing.JButton();
            jScrollPane1 = new javax.swing.JScrollPane();
            txtMessageV = new javax.swing.JTextPane();
            jTabbedPane1 = new javax.swing.JTabbedPane();
            jPanel1 = new javax.swing.JPanel();
            haha = new javax.swing.JButton();
            angry = new javax.swing.JButton();
            cry = new javax.swing.JButton();
            love = new javax.swing.JButton();
            like = new javax.swing.JButton();
            jPanel2 = new javax.swing.JPanel();
            pathFile = new javax.swing.JTextField();
            SendFile = new javax.swing.JButton();
            ChooseFile = new javax.swing.JButton();
            size = new javax.swing.JTextField();
            name = new javax.swing.JTextField();
            jLabel1 = new javax.swing.JLabel();
            jLabel2 = new javax.swing.JLabel();
            jLabel3 = new javax.swing.JLabel();

            jMenuItem1.setText("jMenuItem1");

            Mess.setColumns(20);
            Mess.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            Mess.setRows(5);
            jScrollPane4.setViewportView(Mess);

            send.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            send.setText("Send");
            send.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        sendActionPerformed(evt);
                  }
            });

            txtMessageV.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
            jScrollPane1.setViewportView(txtMessageV);

            jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
            jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

            haha.setIcon(new javax.swing.ImageIcon("C:\\Java\\WSPRJ_67\\haha3.png")); // NOI18N
            haha.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        hahaActionPerformed(evt);
                  }
            });

            angry.setIcon(new javax.swing.ImageIcon("C:\\Java\\WSPRJ_67\\angry2.png")); // NOI18N
            angry.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        angryActionPerformed(evt);
                  }
            });

            cry.setIcon(new javax.swing.ImageIcon("C:\\Java\\WSPRJ_67\\cry3.png")); // NOI18N
            cry.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        cryActionPerformed(evt);
                  }
            });

            love.setIcon(new javax.swing.JLabel() {
                  public javax.swing.Icon getIcon() {
                        try {
                              return new javax.swing.ImageIcon(
                                    new java.net.URL("file:/C:/Java/WSPRJ_67/heartt.png")
                              );
                        } catch (java.net.MalformedURLException e) {
                        }
                        return null;
                  }
            }.getIcon());
            love.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        loveActionPerformed(evt);
                  }
            });

            like.setIcon(new javax.swing.ImageIcon("C:\\Java\\WSPRJ_67\\like1.png")); // NOI18N
            like.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        likeActionPerformed(evt);
                  }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                  jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(haha, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(angry, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cry, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(love, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(like, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
            );
            jPanel1Layout.setVerticalGroup(
                  jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(haha, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(angry, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(cry, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(love, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(like, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 7, Short.MAX_VALUE))
            );

            jTabbedPane1.addTab("Emoji", jPanel1);

            pathFile.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

            SendFile.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            SendFile.setText("Send File");
            SendFile.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SendFileActionPerformed(evt);
                  }
            });

            ChooseFile.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            ChooseFile.setText("...");
            ChooseFile.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ChooseFileActionPerformed(evt);
                  }
            });

            size.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

            name.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

            jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jLabel1.setText("File name:");

            jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jLabel2.setText("Size:");

            jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jLabel3.setText("Path file :");

            javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                  jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                              .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(SendFile))
                              .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(pathFile, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ChooseFile))))
            );
            jPanel2Layout.setVerticalGroup(
                  jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                              .addComponent(pathFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(ChooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                              .addComponent(SendFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(jLabel1)
                              .addComponent(jLabel2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            jTabbedPane1.addTab("Send File", jPanel2);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(jTabbedPane1)
                              .addComponent(jScrollPane1)
                              .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
            );
            layout.setVerticalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
      }// </editor-fold>//GEN-END:initComponents

      private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed

            if(Mess.getText().trim().length()==0) return;
            try {
                  os.write(Mess.getText());
                  os.newLine();
                  os.flush();
                  try {
                        Document doc = txtMessageV.getDocument();
                        doc.insertString(doc.getLength(),"\n" + sender + ":" + Mess.getText(), null);
                  } catch (BadLocationException ex) {
                        ex.printStackTrace();
                  }
                  Mess.setText("");
            } catch (Exception e) {
                  JOptionPane.showMessageDialog(this, e);
            }
      }//GEN-LAST:event_sendActionPerformed

      public void Sendtoserver (String mess){
            
            try {
                  os.write("="+mess);
                  os.newLine();
                  os.flush(); 
            } catch (Exception e) {
                  JOptionPane.showMessageDialog(this, e);
            }}
      
      private void hahaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hahaActionPerformed

            String NameIcon="haha3.png";
            Image img=this.getToolkit().getImage(NameIcon);
                  setVisible(true);
                   Document doc = txtMessageV.getDocument();
                  try {
                     doc.insertString(doc.getLength(), "\n"+sender+":", null);
                 } catch (BadLocationException ex) {
                       ex.printStackTrace();
                 }
                  txtMessageV.setCaretPosition(txtMessageV.getDocument().getLength());
                  txtMessageV.insertIcon(new ImageIcon(img));
                  Sendtoserver(NameIcon);
      }//GEN-LAST:event_hahaActionPerformed

      private void angryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_angryActionPerformed

            String NameIcon="angry2.png";
            Image img=this.getToolkit().getImage(NameIcon);
                  setVisible(true);
                   Document doc = txtMessageV.getDocument();
                  try {
                      doc.insertString(doc.getLength(), "\n"+sender+":", null);
                 } catch (BadLocationException ex) {
                       ex.printStackTrace();
                 }
                  txtMessageV.setCaretPosition(txtMessageV.getDocument().getLength());
                  txtMessageV.insertIcon(new ImageIcon(img));
                  Sendtoserver(NameIcon);
      }//GEN-LAST:event_angryActionPerformed

      private void cryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cryActionPerformed

            String NameIcon="cry3.png";
            Image img=this.getToolkit().getImage(NameIcon);
                  setVisible(true);
                   Document doc = txtMessageV.getDocument();
                  try {
                      doc.insertString(doc.getLength(), "\n"+sender+":", null);
                 } catch (BadLocationException ex) {
                       ex.printStackTrace();
                 }
                  txtMessageV.setCaretPosition(txtMessageV.getDocument().getLength());
                  txtMessageV.insertIcon(new ImageIcon(img));
                  Sendtoserver(NameIcon);
      }//GEN-LAST:event_cryActionPerformed

      private void ChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseFileActionPerformed
            // TODO add your handling code here:
           JFileChooser fc = new JFileChooser();
            fc.showDialog(this, "Select file");
            file = fc.getSelectedFile();
            System.out.println(file.getName());
            FileName=file.getName();
            if(file!=null){
                  if(!file.getName().isEmpty()){
                        ChooseFile.setEnabled(true);
                        String path ="";
                        path= file.getPath();
                        pathFile.setText(path);
                        name.setText(file.getName());
                        size.setText(Math.ceil(file.length()) / 100+"MB");
                        }
                  }
      }//GEN-LAST:event_ChooseFileActionPerformed

      private void SendFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendFileActionPerformed
            // TODO add your handling code here:
            try {
                                                os.write("~,-"+Math.ceil(file.length()) / 100+"MB");
                                                os.newLine();
                                                os.flush(); 
                                                os.write("~,"+FileName);
                                                os.newLine();
                                                os.flush(); 
                                               Document doc = txtMessageV.getDocument();
                                         try {
                                             doc.insertString(doc.getLength(), "\n"+sender+" send File:"+FileName+"!", null);
                                        } catch (BadLocationException ex) {
                                              ex.printStackTrace();
                                        }
                                          } catch (Exception e) {
                                                JOptionPane.showMessageDialog(this, e);
                                          }
      }//GEN-LAST:event_SendFileActionPerformed

      private void loveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loveActionPerformed

            String NameIcon="heartt.png";
            Image img=this.getToolkit().getImage(NameIcon);
                  setVisible(true);
                   Document doc = txtMessageV.getDocument();
                  try {
                     doc.insertString(doc.getLength(), "\n"+sender+":", null);
                 } catch (BadLocationException ex) {
                       ex.printStackTrace();
                 }
                  txtMessageV.setCaretPosition(txtMessageV.getDocument().getLength());
                  txtMessageV.insertIcon(new ImageIcon(img));
                  Sendtoserver(NameIcon);
      }//GEN-LAST:event_loveActionPerformed

      private void likeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likeActionPerformed

            String NameIcon="like1.png";
            Image img=this.getToolkit().getImage(NameIcon);
                  setVisible(true);
                   Document doc = txtMessageV.getDocument();
                  try {
                     doc.insertString(doc.getLength(), "\n"+sender+":", null);
                 } catch (BadLocationException ex) {
                       ex.printStackTrace();
                 }
                  txtMessageV.setCaretPosition(txtMessageV.getDocument().getLength());
                  txtMessageV.insertIcon(new ImageIcon(img));
                  Sendtoserver(NameIcon);
      }//GEN-LAST:event_likeActionPerformed

     public void sendfile(){
      String path = pathFile.getText();
                            try{
                               File f;
                              f = new File(path);
                               if(!f.exists()) return;
                               FileReader fr = new FileReader(f);
                               BufferedReader br = new BufferedReader(fr); 
                               String S;
                               while((S=br.readLine()) !=null){
                                     S=S.trim();
                                     if(S.length()>0)
                                     {
                                           System.out.println(S);
                                           try {
                                                os.write("~"+S);
                                                os.newLine();
                                                os.flush(); 
                                          } catch (Exception e) {
                                                JOptionPane.showMessageDialog(this, e);
                                          }
                                     }
                               }
                               br.close(); fr.close();
                               try {
                                                os.write("~STOP");
                                                os.newLine();
                                                os.flush(); 
                                          } catch (Exception e) {
                                                JOptionPane.showMessageDialog(this, e);
                                          }
                        }
                        catch (Exception e)
                        {
                              e.getStackTrace();
                        }    
            pathFile.setText("");
            name.setText("");
            size.setText("");
}
  
      public void abc(Vector<String> name){

                  System.out.println(listSocket.size());
                  try {
                        for (int i = 0; i <listSocket.size(); i++)
                        {
                        os=new BufferedWriter(new OutputStreamWriter(listSocket.get(i).getOutputStream()));
                              for(String Name: name){
                                    os.write("*"+Name);os.newLine();
                                    os.flush();
                              }
                        }
                  } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e);
                  }
}
            public void exit(Vector<String> name,int index,Vector<Socket> list){

                  System.out.println(list.size());
                  try {
                        for (int i = 0; i <list.size(); i++)
                        {
                         os=new BufferedWriter(new OutputStreamWriter(list.get(i).getOutputStream()));
                                    os.write("&"+index);os.newLine();
                                    os.flush();
                        }
                  } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e);
                  }
}
      


      // Variables declaration - do not modify//GEN-BEGIN:variables
      private javax.swing.JButton ChooseFile;
      private javax.swing.JTextArea Mess;
      private javax.swing.JButton SendFile;
      private javax.swing.JButton angry;
      private javax.swing.JButton cry;
      private javax.swing.JButton haha;
      private javax.swing.JLabel jLabel1;
      private javax.swing.JLabel jLabel2;
      private javax.swing.JLabel jLabel3;
      private javax.swing.JMenuItem jMenuItem1;
      private javax.swing.JPanel jPanel1;
      private javax.swing.JPanel jPanel2;
      private javax.swing.JScrollPane jScrollPane1;
      private javax.swing.JScrollPane jScrollPane4;
      private javax.swing.JTabbedPane jTabbedPane1;
      private javax.swing.JButton like;
      private javax.swing.JButton love;
      private javax.swing.JTextField name;
      private javax.swing.JTextField pathFile;
      private javax.swing.JButton send;
      private javax.swing.JTextField size;
      private javax.swing.JTextPane txtMessageV;
      // End of variables declaration//GEN-END:variables

@Override
            public void run(){
            while(true)
                        try {
                              if(socket!=null){
                                    String msg="";
                                    if((msg=bf.readLine())!= null && msg.length()>0){    
                                          String mess=msg;
                                          System.out.println(mess);
                                         if(msg.charAt(0)=='('){ 
                                               Document doc = txtMessageV.getDocument();
                                                try {
                                                      doc.insertString(doc.getLength(),"\n" +receiver.substring(1) + ":" + msg.substring(1) , null);
                                                } catch (BadLocationException ex) {
                                                      ex.printStackTrace();
                                                }            
                                          }
                                         else if(msg.charAt(0)=='!'){ 
                                               System.out.println(msg);
                                                            try {
                                                            os=new BufferedWriter(new OutputStreamWriter(listSocket.get(Integer.parseInt(msg.substring(1,2))).getOutputStream()));
                                                            os.write(msg);os.newLine();
                                                            os.flush();
                                                            os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                                                            } catch (Exception e) {
                                                                  JOptionPane.showMessageDialog(this, e.getMessage());
                                                            } 
                                          }
                                         else if(msg.charAt(0)=='~'){ 
                                               if (msg.charAt(1)==';') {
                                                     sendfile();
                                               } else if(msg.charAt(1)==':') {
                                                     Document doc = txtMessageV.getDocument();
                                                try {
                                                      doc.insertString(doc.getLength(),"\n" +receiver.substring(1) + ":" + msg.substring(2) , null);
                                                      pathFile.setText("");
                                                      name.setText("");
                                                      size.setText("");
                                                } catch (BadLocationException ex) {
                                                      ex.printStackTrace();
                                                }   
                                               }       
                                          }
                                        else if(msg.charAt(0)=='#'){
                                              try {
                                                              os=new BufferedWriter(new OutputStreamWriter(listSocket.get(Integer.parseInt(msg.substring(1,2))).getOutputStream()));
                                                            os.write(msg);os.newLine();
                                                            os.flush();
                                                            os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                                                            } catch (Exception e) {
                                                                  JOptionPane.showMessageDialog(this, e.getMessage());
                                                            }
                                                        }
                                    else if(msg.charAt(0)=='+'){
                                          try {
                                                              System.out.println("aaaaaaaaaa");
                                                              os=new BufferedWriter(new OutputStreamWriter(listSocket.get(Integer.parseInt(msg.substring(1,2))).getOutputStream()));
                                                            os.write(msg);os.newLine();
                                                            os.flush();
                                                            os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                                                            } catch (Exception e) {
                                                                  JOptionPane.showMessageDialog(this, e.getMessage());
                                                            }
                                    }     
                                         else if(mess.charAt(0)=='^'){
                                               try {
                                                              System.out.println(msg);
                                                            os=new BufferedWriter(new OutputStreamWriter(listSocket.get(Integer.parseInt(msg.substring(1,2))).getOutputStream()));
                                                            os.write(msg);os.newLine();
                                                            os.flush();
                                                            os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                                                            } catch (Exception e) {
                                                                  JOptionPane.showMessageDialog(this, e.getMessage());
                                                            }
                                                      } 
                                         else if(msg.charAt(0)=='$'){
                                               try {
                                                os=new BufferedWriter(new OutputStreamWriter(listSocket.get(Integer.parseInt(mess.substring(1))).getOutputStream()));
                                                            os.write(msg);os.newLine();
                                                            os.flush();
                                                            os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                                                 } catch (Exception e) {
                                                      JOptionPane.showMessageDialog(this, e.getMessage());
                                                }
                                                      }
                                          else if(msg.charAt(0)=='{'){
                                               try {
                                                     System.out.println("{:"+msg);
                                                os=new BufferedWriter(new OutputStreamWriter(listSocket.get(Integer.parseInt(msg.substring(1,2))).getOutputStream()));
                                                            os.write(msg);os.newLine();
                                                            os.flush();
                                                            os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                                                 } catch (Exception e) {
                                                       System.out.println("loii");
                                                      JOptionPane.showMessageDialog(this, e.getMessage());
                                                }
                                                      }
                                          else if(msg.charAt(0)==')'){
                                               try {
                                                os=new BufferedWriter(new OutputStreamWriter(listSocket.get(Integer.parseInt(msg.substring(1,2))).getOutputStream()));
                                                            os.write(msg);os.newLine();
                                                            os.flush();
                                                            os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                                                 } catch (Exception e) {
                                                       System.out.println("loii");
                                                      JOptionPane.showMessageDialog(this, e.getMessage());
                                                }
                                                      }
                                          else if(msg.charAt(0)==']'){
                                               try {
                                                os=new BufferedWriter(new OutputStreamWriter(listSocket.get(Integer.parseInt(msg.substring(1,2))).getOutputStream()));
                                                            os.write(msg);os.newLine();
                                                            os.flush();
                                                            os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                                                 } catch (Exception e) {
                                                       System.out.println("loii");
                                                      JOptionPane.showMessageDialog(this, e.getMessage());
                                                }
                                                      }
                                         else if(msg.charAt(0)=='='){
                                                            String NameIcon=msg.substring(1);
                                                            Image img=this.getToolkit().getImage(NameIcon);
                                                             Document doc = txtMessageV.getDocument();
                                                            try {
                                                                doc.insertString(doc.getLength(), "\n"+receiver.substring(1)+":", null);
                                                           } catch (BadLocationException ex) {
                                                                 ex.printStackTrace();
                                                           }
                                                            txtMessageV.setCaretPosition(txtMessageV.getDocument().getLength());
                                                            txtMessageV.insertIcon(new ImageIcon(img));
                                                      }
                                         else if(msg.charAt(0)=='>'){
                                               try {
                                                os=new BufferedWriter(new OutputStreamWriter(listSocket.get(Integer.parseInt(mess.substring(1,2))).getOutputStream()));
                                                            os.write(msg);os.newLine();
                                                            os.flush();
                                                            os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                                                 } catch (Exception e) {
                                                      JOptionPane.showMessageDialog(this, e.getMessage());
                                                }
                                                      }
                                         else if(msg.charAt(0)=='['){
                                               chooseFile(msg);
                                                      }
                                         else{
                                          System.out.println(msg);
                                         Document doc = txtMessageV.getDocument();
                                          try {
                                                doc.insertString(doc.getLength(),"\n" +receiver.substring(1) + ":" + msg , null);
                                          } catch (BadLocationException ex) {
                                                ex.printStackTrace();
                                          }    
                                    }   
                                    }}
                              
                        } catch (Exception e) {
                              int index = listSocket.indexOf(socket);
                              System.out.println(index);
                              listSocket.remove(index);
                              Name.remove(index);
                              exit(Name, index, listSocket);
                              Document doc = txtMessageV.getDocument();
                                          try {
                                                doc.insertString(doc.getLength(),"\nDisconnect!" , null);
                                          } catch (BadLocationException ex) {
                                                ex.printStackTrace();
                                          }
                              break;
                        }
      }
            
            public void chooseFile(String msg) throws FileNotFoundException, IOException{

             PrintWriter pw =null;
              if(msg.charAt(1)==','){
                    if(msg.charAt(2)=='-'){
                          fSize=msg.substring(3);
                    }else{
                   content = new Vector<>();
                  pathfile=getpath(msg);
                    System.out.println("pr:"+pathfile);
                    }
                  }
              else if(!msg.equals("[STOP")){
                    content.add(msg.substring(1));
                    System.out.println(msg);
              }else{
                    savefile(content);
                  try {
                        os.write("("+"Received file successfully!");os.newLine();
                        os.flush();
                         Document doc = txtMessageV.getDocument();
                        try {
                            doc.insertString(doc.getLength(), "\n"+sender+":"+"Received file successfully!", null);
                       } catch (BadLocationException ex) {
                             ex.printStackTrace();
                       }
                  } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e);
                  }   
              }
 }
    public boolean createFile(String Path,String FileName){
            boolean kt = true;
            try{
            File file = new File(Path+"\\"+FileName);
                  System.out.println("ddddddddddddđ:"+Path+"\\"+FileName);
            if(file.createNewFile())
            System.out.println("Success!");
            else{
                  int r = JOptionPane.showConfirmDialog(txtMessageV, "File ( "+FileName +" )already exists, do you want to overwrite this file ( "+fSize+" )?", "Error, file already exists!", JOptionPane.YES_NO_OPTION);
               if (r == JOptionPane.YES_OPTION) {
                     kt=true;
               }
               else if(r == JOptionPane.NO_OPTION) {
                    JOptionPane.showMessageDialog(txtMessageV, "Rename and save this file!");
                           kt=false;
               }
            }
        }
     catch(IOException ioe) {
        ioe.printStackTrace();
     }
            return kt;
      }
        
  public String getpath(String msg){
        String filename="";
       File file;
       String S="";
       String pathfile="";
           filename=msg.substring(2);
             int r;
             Document doc = txtMessageV.getDocument();
                                         try {
                                             doc.insertString(doc.getLength(), "\n"+receiver.substring(1)+" send File:"+filename+"!", null);
                                        } catch (BadLocationException ex) {
                                              ex.printStackTrace();
                                        }
            r = JOptionPane.showConfirmDialog(txtMessageV, "Do you want to receive file ( "+filename+" ) from "+receiver+" ("+fSize+")?", "File?", JOptionPane.YES_NO_OPTION);
            if (r == JOptionPane.YES_OPTION) {
                  try {
                                          os.write("[;");
                                          os.newLine();
                                          os.flush(); 
                                    } catch (Exception e) {
                                          JOptionPane.showMessageDialog(this, e);
                                    }
                  JFileChooser chooser = new JFileChooser(); 
                 chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
                 int path = chooser.showOpenDialog(getParent());
                  S = chooser.getSelectedFile().getPath();
                       System.out.println(S);
                  while(S.length()<=0){
                             path = chooser.showOpenDialog(getParent());
                              S = chooser.getSelectedFile().getPath();
                  }
                              if( createFile(S, filename)){
                                    pathfile=S+"\\"+filename;
                                    System.out.println("kkkkkkk");
                                    System.out.println("path:"+pathfile);
                              }else{
                                    Rename re = new Rename(S, filename);
                                    re.setVisible(true);
                                    while(re.isVisible()){
                                          re.isVisible();
                                          System.out.println(re.isVisible());
                                    }
                                    System.out.println("stop");
                                    filename=re.FileName();
                                    pathfile=filename;
                                    System.out.println("path:"+pathfile);
                                    
                              }
            }else if(r == JOptionPane.NO_OPTION){
                                    doc = txtMessageV.getDocument();
                                         try {
                                             doc.insertString(doc.getLength(), "\n"+sender+": deny request! ", null);
                                        } catch (BadLocationException ex) {
                                              ex.printStackTrace();
                                        }
                                         try {
                                          os.write("[:"+" deny your request! ");
                                          os.newLine();
                                          os.flush(); 
                                    } catch (Exception e) {
                                          JOptionPane.showMessageDialog(this, e);
                                    }
            }
            return pathfile;
       }
  public void savefile(Vector content){
        PrintWriter pw =null;
        System.out.println("SAVEFILE");
                    String line="";
                       try {
                             System.out.println("cuoi:"+pathfile);
                             pw = new PrintWriter(pathfile);
                                          for(int i=0;i<content.size();i++)
                                {
                                       line = String.format("%s", content.get(i));
                                      pw.println(line);
                                      System.out.println(line);
                                }
                                          pw.close();
                      }
                      catch (Exception e) 
                      {
                            JOptionPane.showMessageDialog(this, e);
                      }
  }
}
