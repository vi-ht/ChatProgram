/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Chatting;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/**
 *
 * @author Thanh Vi
 */
public class P2P extends javax.swing.JFrame  implements Runnable {

           Socket socket;
      JList<String>display ;
      JTextPane txt;
      JList list;
      String sender;
      String receiver;
      Vector<Socket> listSocket;
      Vector<String> Name;
      String FileName="";
      DefaultListModel<String> model = new DefaultListModel<>();
      Thread t;
      int posS;
      int posR;
      BufferedWriter os=null;
      BufferedReader bf=null;
      ArrayList<Integer> chat;
      JTextField pfile, tn, ts;
      String pathfile="";
      Vector<String> content = null;
      String fSize;
      File fileCILENT;
     String pathfileCILENT="";
      Vector<String> contentCILENT = null;
      String fSizeCILENT="";
      String FileNameCILENT="";
      Rename rn;
      public P2P(Socket s, String sender,String receiver,DefaultListModel l,JList d,JTextPane TA,Vector v,int posSend,
                                                                                                int posReceiver,ArrayList chat,JTextField pf,String filename,JTextField tn,JTextField ts) {
            initComponents();
            this.socket=s;
            this.listSocket=v;
            this.sender=sender;
          this.receiver=receiver;
            this.display=d;
            this.model=l;
            this.txt=TA;
            this.tfSender.setText(sender);
            this.tfReceiver.setText(receiver);
            this.posR=posReceiver;
            this.posS=posSend;
            this.chat=chat;
           this.pfile=pf;
           this.tn=tn;
           this.ts=ts;
           this.FileName=filename;
           rn = new Rename("", "");
            try {
                  bf=new BufferedReader(new InputStreamReader(socket.getInputStream()));
                  os=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                  t=new Thread(this);
                        t.start();
            } catch (Exception e) {
            }   
      }

      private P2P() {
            throw new UnsupportedOperationException("Not supported yet."); 
      }

      public  void display(String mess) {
             Document doc = View.getDocument();
                                          try {
                                                doc.insertString(doc.getLength(),"\n" + sender + ":" + mess , null);
                                          } catch (BadLocationException ex) {
                                                ex.printStackTrace();
                                          }
      }
       public  void SENTTO(String mess) {
             Document doc = View.getDocument();
                                          try {
                                                doc.insertString(doc.getLength(),("\n" + receiver + ":" + mess+"\n--------------------------------------------") , null);
                                          } catch (BadLocationException ex) {
                                                ex.printStackTrace();
                                          }
      }
      public  void info(String r,int posSend,int posReceiver) {
             this.receiver=r;
             this.tfReceiver.setText(r);
             this.posR=posReceiver;
                  this.posS=posSend;
            
      }
      public  void file(String name) {
             this.FileName=name;
            
      }

     

      /**
       * This method is called from within the constructor to initialize the
       * form. WARNING: Do NOT modify this code. The content of this method is
       * always regenerated by the Form Editor.
       */
      @SuppressWarnings("unchecked")
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
      private void initComponents() {

            jButton1 = new javax.swing.JButton();
            jScrollPane1 = new javax.swing.JScrollPane();
            View = new javax.swing.JTextPane();
            jScrollPane2 = new javax.swing.JScrollPane();
            Mess = new javax.swing.JTextArea();
            btnSend = new javax.swing.JButton();
            jPanel1 = new javax.swing.JPanel();
            tfSender = new javax.swing.JTextField();
            tfReceiver = new javax.swing.JTextField();
            jLabel1 = new javax.swing.JLabel();
            jLabel2 = new javax.swing.JLabel();
            jButton2 = new javax.swing.JButton();
            jButton3 = new javax.swing.JButton();
            jTabbedPane1 = new javax.swing.JTabbedPane();
            jPanel2 = new javax.swing.JPanel();
            haha = new javax.swing.JButton();
            angry = new javax.swing.JButton();
            cry = new javax.swing.JButton();
            love = new javax.swing.JButton();
            like = new javax.swing.JButton();
            jPanel3 = new javax.swing.JPanel();
            pathFile = new javax.swing.JTextField();
            choosefile = new javax.swing.JButton();
            sendfile = new javax.swing.JButton();
            sizecilent = new javax.swing.JTextField();
            nameCilent = new javax.swing.JTextField();
            jLabel3 = new javax.swing.JLabel();
            jLabel4 = new javax.swing.JLabel();
            jLabel5 = new javax.swing.JLabel();

            jButton1.setText("jButton1");

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

            jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

            View.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
            jScrollPane1.setViewportView(View);

            Mess.setColumns(20);
            Mess.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            Mess.setRows(5);
            jScrollPane2.setViewportView(Mess);

            btnSend.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            btnSend.setText("Send");
            btnSend.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        btnSendActionPerformed(evt);
                  }
            });

            jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chatting", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

            tfSender.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

            tfReceiver.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

            jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jLabel1.setText("Sender:");

            jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jLabel2.setText("Receiver:");

            jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jButton2.setText("Disconected");
            jButton2.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton2ActionPerformed(evt);
                  }
            });

            jButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jButton3.setText("Close");
            jButton3.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton3ActionPerformed(evt);
                  }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                  jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfSender, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfReceiver, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6))
            );
            jPanel1Layout.setVerticalGroup(
                  jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                              .addComponent(tfSender, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(jLabel1)
                              .addComponent(jLabel2)
                              .addComponent(tfReceiver, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
            jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

            haha.setIcon(new javax.swing.ImageIcon("C:\\Java\\WSPRJ_67\\haha3.png")); // NOI18N
            haha.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        hahaActionPerformed(evt);
                  }
            });

            angry.setIcon(new javax.swing.ImageIcon("C:\\Java\\WSPRJ_67\\Image\\angry2.png")); // NOI18N
            angry.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        angryActionPerformed(evt);
                  }
            });

            cry.setIcon(new javax.swing.ImageIcon("C:\\Java\\WSPRJ_67\\cry3.png")); // NOI18N
            cry.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        cryActionPerformed(evt);
                  }
            });

            love.setIcon(new javax.swing.ImageIcon("C:\\Java\\WSPRJ_67\\heartt.png")); // NOI18N
            love.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        loveActionPerformed(evt);
                  }
            });

            like.setIcon(new javax.swing.ImageIcon("C:\\Java\\WSPRJ_67\\like1.png")); // NOI18N
            like.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        likeActionPerformed(evt);
                  }
            });

            javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                  jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(haha, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(angry, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cry, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(love, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addComponent(like, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
            );
            jPanel2Layout.setVerticalGroup(
                  jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(like, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(angry, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(haha, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(cry, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(love, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            jTabbedPane1.addTab("Emoji", jPanel2);

            pathFile.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

            choosefile.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            choosefile.setText("...");
            choosefile.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        choosefileActionPerformed(evt);
                  }
            });

            sendfile.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            sendfile.setText("Send File");
            sendfile.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        sendfileActionPerformed(evt);
                  }
            });

            sizecilent.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

            nameCilent.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

            jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jLabel3.setText("Path file:");

            jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jLabel4.setText("Size:");

            jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            jLabel5.setText("File name:");

            javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
            jPanel3.setLayout(jPanel3Layout);
            jPanel3Layout.setHorizontalGroup(
                  jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(jLabel3)
                              .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                              .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(nameCilent, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sizecilent, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sendfile))
                              .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(pathFile)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(choosefile)))
                        .addGap(3, 3, 3))
            );
            jPanel3Layout.setVerticalGroup(
                  jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                              .addComponent(pathFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(choosefile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                              .addComponent(sendfile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(sizecilent, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(nameCilent, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(jLabel4)
                              .addComponent(jLabel5))
                        .addGap(0, 6, Short.MAX_VALUE))
            );

            jTabbedPane1.addTab("Send file", jPanel3);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(jTabbedPane1)
                              .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                              .addComponent(jScrollPane1)
                              .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
            );
            layout.setVerticalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            pack();
      }// </editor-fold>//GEN-END:initComponents

      private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
            if(Mess.getText().trim().length()==0) return;
            try {
                  os.write("^"+posR+posS+Mess.getText());
                  System.out.println("^"+posR+posS+Mess.getText());
                 os.newLine();
                  os.flush();
                  Document doc = View.getDocument();
                                          try {
                                                doc.insertString(doc.getLength(),("\n" + sender + ":" + Mess.getText()), null);
                                          } catch (BadLocationException ex) {
                                                ex.printStackTrace();
                                          }
                  Mess.setText("");
            } catch (Exception e) {
                  JOptionPane.showMessageDialog(this, e);
            }
      }//GEN-LAST:event_btnSendActionPerformed

             public void disconnect(){
            String a = "$"+posR;
            try {
                  os.write(a); os.newLine();
                  os.flush();
            } catch (Exception e) {
                  JOptionPane.showMessageDialog(this, e);
            }
       }
      private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
           int r = JOptionPane.showConfirmDialog(this, "Are you sure ?", "Disconnect?", JOptionPane.YES_NO_OPTION);
      if (r == JOptionPane.YES_OPTION) {
            this.setVisible(false);
            View.setText("");
            disconnect();
      }
      }//GEN-LAST:event_jButton2ActionPerformed

      private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
            this.setVisible(false);
            View.setText("");
             jButton2.setEnabled(true);
              btnSend.setEnabled(true);
      }//GEN-LAST:event_jButton3ActionPerformed

       public void SendEmoji (String mess){
            try {
                  os.write(">"+mess);
                  os.newLine();
                  os.flush(); 
            } catch (Exception e) {
                  JOptionPane.showMessageDialog(this, e);
            }
      }
      private void hahaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hahaActionPerformed

             String NameIcon="haha3.png";
            Image img=this.getToolkit().getImage(NameIcon);
                  setVisible(true);
                   Document doc = View.getDocument();
                  try {
                     doc.insertString(doc.getLength(), "\n"+sender+":", null);
                 } catch (BadLocationException ex) {
                       ex.printStackTrace();
                 }
                  View.setCaretPosition(View.getDocument().getLength());
                  View.insertIcon(new ImageIcon(img));
                  SendEmoji(posR+NameIcon);
      }//GEN-LAST:event_hahaActionPerformed

      private void angryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_angryActionPerformed

             String NameIcon="angry2.png";
            Image img=this.getToolkit().getImage(NameIcon);
                  setVisible(true);
                   Document doc = View.getDocument();
                  try {
                      doc.insertString(doc.getLength(), "\n"+sender+":", null);
                 } catch (BadLocationException ex) {
                       ex.printStackTrace();
                 }
                  
                  View.setCaretPosition(View.getDocument().getLength());
                  View.insertIcon(new ImageIcon(img));
                  SendEmoji(posR+NameIcon);
      }//GEN-LAST:event_angryActionPerformed

      private void cryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cryActionPerformed

            String NameIcon="cry3.png";
            Image img=this.getToolkit().getImage(NameIcon);
                  setVisible(true);
                   Document doc = View.getDocument();
                  try {
                      doc.insertString(doc.getLength(), "\n"+sender+":", null);
                 } catch (BadLocationException ex) {
                       ex.printStackTrace();
                 }
                  View.setCaretPosition(View.getDocument().getLength());
                  View.insertIcon(new ImageIcon(img));
                  SendEmoji(posR+NameIcon);
      }//GEN-LAST:event_cryActionPerformed

      private void likeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likeActionPerformed

            String NameIcon="like1.png";
            Image img=this.getToolkit().getImage(NameIcon);
                  setVisible(true);
                   Document doc = View.getDocument();
                  try {
                      doc.insertString(doc.getLength(), "\n"+sender+":", null);
                 } catch (BadLocationException ex) {
                       ex.printStackTrace();
                 }  
                  View.setCaretPosition(View.getDocument().getLength());
                  View.insertIcon(new ImageIcon(img));
                  SendEmoji(posR+NameIcon);
      }//GEN-LAST:event_likeActionPerformed

      private void loveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loveActionPerformed

            String NameIcon="heartt.png";
            Image img=this.getToolkit().getImage(NameIcon);
                  setVisible(true);
                   Document doc = View.getDocument();
                  try {
                      doc.insertString(doc.getLength(), "\n"+sender+":", null);
                 } catch (BadLocationException ex) {
                       ex.printStackTrace();
                 }
                  View.setCaretPosition(View.getDocument().getLength());
                  View.insertIcon(new ImageIcon(img));
                  SendEmoji(posR+NameIcon);
      }//GEN-LAST:event_loveActionPerformed

      private void sendfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendfileActionPerformed

            try {
                                                os.write("{"+posR+",-"+Math.ceil(fileCILENT.length()) / 100+"MB");
                                                os.newLine();
                                                os.flush(); 
                                                os.write("{"+posR+","+FileNameCILENT);
                                                os.newLine();
                                                os.flush(); 
                                               Document doc = View.getDocument();
                                         try {
                                             doc.insertString(doc.getLength(), "\n"+sender+" send File:"+FileNameCILENT+"!", null);
                                        } catch (BadLocationException ex) {
                                              ex.printStackTrace();
                                        }
                                          } catch (Exception e) {
                                                JOptionPane.showMessageDialog(this, e);
                                          }
      }//GEN-LAST:event_sendfileActionPerformed

      public void sendfileCILENT(){
      String path = pathFile.getText();
                            try{
                               File f;
                              f = new File(path);
                               if(!f.exists()) return;
                               FileReader fr = new FileReader(f);
                               BufferedReader br = new BufferedReader(fr);
                               String S;
                               while((S=br.readLine()) !=null){
                                     S=S.trim();
                                     if(S.length()>0)
                                     {
                                           System.out.println(S);
                                           try {
                                                os.write("{"+posR+S);
                                                os.newLine();
                                                os.flush(); 
                                          } catch (Exception e) {
                                                JOptionPane.showMessageDialog(this, e);
                                          }
                                     }
                               }
                               br.close(); fr.close();
                               try {
                                                os.write("{"+posR+"STOP");
                                                os.newLine();
                                                os.flush(); 
                                          } catch (Exception e) {
                                                JOptionPane.showMessageDialog(this, e);
                                          }
                        }
                        catch (Exception e)
                        {
                            
                        }    
            pathFile.setText("");
            nameCilent.setText("");
            sizecilent.setText("");
      }
      
      private void choosefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosefileActionPerformed
            // TODO add your handling code here:
            JFileChooser fc = new JFileChooser();
            fc.showDialog(this, "Select file");
            fileCILENT = fc.getSelectedFile();
            System.out.println(fileCILENT.getName());
            FileNameCILENT=fileCILENT.getName();
            if(fileCILENT!=null){
                  if(!fileCILENT.getName().isEmpty()){
                        choosefile.setEnabled(true);
                        String path ="";
                        path= fileCILENT.getPath();
                        pathFile.setText(path);
                        nameCilent.setText(fileCILENT.getName());
                        sizecilent.setText(Math.ceil(fileCILENT.length()) / 100+"MB");
                        }
                  }
      }//GEN-LAST:event_choosefileActionPerformed

      /**
       * @param args the command line arguments
       */
      public static void main(String args[]) {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
             */
            try {
                  for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                        if ("Nimbus".equals(info.getName())) {
                              javax.swing.UIManager.setLookAndFeel(info.getClassName());
                              break;
                        }
                  }
            } catch (ClassNotFoundException ex) {
                  java.util.logging.Logger.getLogger(P2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                  java.util.logging.Logger.getLogger(P2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                  java.util.logging.Logger.getLogger(P2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                  java.util.logging.Logger.getLogger(P2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                  public void run() {
                        new P2P().setVisible(true);
                  }
            });
      }

      // Variables declaration - do not modify//GEN-BEGIN:variables
      private javax.swing.JTextArea Mess;
      private javax.swing.JTextPane View;
      private javax.swing.JButton angry;
      private javax.swing.JButton btnSend;
      private javax.swing.JButton choosefile;
      private javax.swing.JButton cry;
      private javax.swing.JButton haha;
      private javax.swing.JButton jButton1;
      private javax.swing.JButton jButton2;
      private javax.swing.JButton jButton3;
      private javax.swing.JLabel jLabel1;
      private javax.swing.JLabel jLabel2;
      private javax.swing.JLabel jLabel3;
      private javax.swing.JLabel jLabel4;
      private javax.swing.JLabel jLabel5;
      private javax.swing.JPanel jPanel1;
      private javax.swing.JPanel jPanel2;
      private javax.swing.JPanel jPanel3;
      private javax.swing.JScrollPane jScrollPane1;
      private javax.swing.JScrollPane jScrollPane2;
      private javax.swing.JTabbedPane jTabbedPane1;
      private javax.swing.JButton like;
      private javax.swing.JButton love;
      private javax.swing.JTextField nameCilent;
      private javax.swing.JTextField pathFile;
      private javax.swing.JButton sendfile;
      private javax.swing.JTextField sizecilent;
      private javax.swing.JTextField tfReceiver;
      private javax.swing.JTextField tfSender;
      // End of variables declaration//GEN-END:variables
 @Override
            public void run(){
                  while(true)
                        try {
                              if(socket!=null){
                                    String msg="";
                                    if((msg=bf.readLine())!= null && msg.length()>0){   
                                          System.out.println(msg);
                                          switch(msg.charAt(0)){
                                                case '*': 
                                                      check1(msg);
                                                      break;
                                                case '&':
                                                      model.removeElementAt(Integer.parseInt(msg.substring(1)));
                                                      display.setModel(model);
                                                      break;
                                                case '!':
                                                      check2(msg);
                                                      break;
                                                case '^':
                                                      check3(msg);
                                                      break;
                                                 case '$':
                                                       check4();
                                                       break;
                                                 case '#':
                                                        Document doc = View.getDocument();
                                                      try {
                                                            doc.insertString(doc.getLength(),("\n--------------------------------------------\n" + receiver + " deny your request!" ), null);
                                                      } catch (BadLocationException ex) {
                                                            ex.printStackTrace();
                                                      }
                                                      jButton2.setEnabled(false);
                                                      btnSend.setEnabled(false);
                                                      break;
                                                  case '+':
                                                        String a=msg.substring(2);
                                                            System.out.println(a);
                                                            SENTTO(a);
                                                            chat.add(posR);
                                                            break;
                                                   case '{':
                                                         chooseFileCILENT(msg);
                                                         break;
                                                   case ']':
                                                            if (msg.charAt(2)==';') {
                                                                  System.out.println("send file");
                                                                              sendfileCILENT();
                                                                        } else if(msg.charAt(2)==':') {
                                                                              doc = View.getDocument();
                                                                         try {
                                                                               doc.insertString(doc.getLength(),"\n" +receiver + ":" + msg.substring(3) , null);
                                                                              pathFile.setText("");
                                                                              nameCilent.setText("");
                                                                              sizecilent.setText("");
                                                                         } catch (BadLocationException ex) {
                                                                               ex.printStackTrace();
                                                                         }   
                                                                    }
                                                            break;
                                                   case '=':
                                                        String NameIcon=msg.substring(1);
                                                            Image img=this.getToolkit().getImage(NameIcon);
                                                            doc = txt.getDocument();
                                                            try {
                                                                doc.insertString(doc.getLength(), "\n"+"Manager"+":", null);
                                                           } catch (BadLocationException ex) {
                                                                 ex.printStackTrace();
                                                           }
                                                            txt.setCaretPosition(txt.getDocument().getLength());
                                                            txt.insertIcon(new ImageIcon(img));
                                                      
                                                            break;
                                                       case '(':
                                                             doc = txt.getDocument();
                                                             try {
                                                                   doc.insertString(doc.getLength(),"\n" +receiver + ":" + msg.substring(1) , null);
                                                             } catch (BadLocationException ex) {
                                                                   ex.printStackTrace();
                                                             }     
                                                             break;
                                                      case ')':
                                                             doc = View.getDocument();
                                                             try {
                                                                   doc.insertString(doc.getLength(),"\n" +receiver + ":" + msg.substring(2) , null);
                                                             } catch (BadLocationException ex) {
                                                                   ex.printStackTrace();
                                                             }     
                                                             break;
                                                      case '[':
                                                             
                                                                      if (msg.charAt(1)==';') {
                                                                              sendfile();
                                                                        } else if(msg.charAt(1)==':') {
                                                                              doc = txt.getDocument();
                                                                         try {
                                                                               doc.insertString(doc.getLength(),"\n" +receiver + ":" + msg.substring(2) , null);
                                                                              pfile.setText("");
                                                                              tn.setText("");
                                                                              ts.setText("");
                                                                         } catch (BadLocationException ex) {
                                                                               ex.printStackTrace();
                                                                         }   
      
                                          }
                                                             
                                                   case '>':
                                                           NameIcon=msg.substring(2);
                                                            img=this.getToolkit().getImage(NameIcon);
                                                            doc = View.getDocument();
                                                            try {
                                                                doc.insertString(doc.getLength(), "\n"+receiver+":", null);
                                                           } catch (BadLocationException ex) {
                                                                 ex.printStackTrace();
                                                           }
                                                            View.setCaretPosition(View.getDocument().getLength());
                                                            View.insertIcon(new ImageIcon(img));                     
                                                            break;
                                                            case '~':
                                                                  chooseFile(msg);
                                                            break;
                                                   default:
                                                            System.out.println("defalut:"+msg);
                                                                  doc = txt.getDocument();
                                                            try {
                                                                  doc.insertString(doc.getLength(),(("\n" +"Manager" + ":" + msg ) ), null);
                                                            } catch (BadLocationException ex) {
                                                                  ex.printStackTrace();
                                                            }
                                                            break;
                                          }
                              }}
                            Thread.sleep(1000);
                        } catch (Exception e) {
                              e.getMessage();
                        }
            }
public void check1(String msg){
            int kt =0;
                for (int i = 0; i < model.size(); i++) {
                      if (!(model.get(i).equals(msg)) && !(model.get(i).equals(msg + " (Me)"))) {
                            kt = 0;
                      } else {
                            kt = 1;
                            break;
                      }
                }
                if (msg.substring(2).equals(sender)) {
                      msg = msg + " (Me)";
                      System.out.println(msg);
                }
                if (kt == 0) {
                      model.addElement(msg);
                      display.setModel(model);
                  }
                return;
}
public void check2(String msg){
      
    
             int r;
      r = JOptionPane.showConfirmDialog(txt, "Do you want to connect with '" + msg.substring(3).toUpperCase() + "' ?", "Connect?", JOptionPane.YES_NO_OPTION);
      if (r == JOptionPane.YES_OPTION) {
            info(msg.substring(3),Integer.parseInt(msg.substring(1,2)),Integer.parseInt(msg.substring(2,3)) );
            this.setVisible(true);
            this.display("Connected.\n--------------------------------------------");
            response(msg.substring(2,3)+"Connected.");
      }else{
            System.out.println("say no");
            responseNo(msg.substring(2,3)+"");
      }
}
public void check3(String msg){
                  System.out.println(msg);
                  Document doc = View.getDocument();
                                                      try {
                                                            doc.insertString(doc.getLength(),("\n" + receiver + ":" + msg.substring(3) ), null);
                                                      } catch (BadLocationException ex) {
                                                            ex.printStackTrace();
                                                      }
}
public void check4(){
      System.out.println("aaaaaabbbbbcccc");
                  Document doc = View.getDocument();
                                                      try {
                                                            doc.insertString(doc.getLength(),("\n--------------------------------------------\n" + receiver + " Disconected!" ), null);
                                                      } catch (BadLocationException ex) {
                                                            ex.printStackTrace();
                                                      }
                  jButton2.setEnabled(false);
                  btnSend.setEnabled(false);
}
       public void response(String res){
            String a = "+"+res;
            try {
                  os.write(a);os.newLine();
                  os.flush();
            } catch (Exception e) {
                  JOptionPane.showMessageDialog(this, e);
            }
       }
 public void responseNo(String res){
            String a = "#"+res;
            try {
                  os.write(a);os.newLine();
                  //os.write(13); os.write(10);
                  os.flush();
            } catch (Exception e) {
                  JOptionPane.showMessageDialog(this, e);
            }
       }
    
 public void chooseFile(String msg) throws FileNotFoundException, IOException{

             System.out.println(pathfile);
             PrintWriter pw =null;
             FileOutputStream fout = null;
              if(msg.charAt(1)==','){
                    if(msg.charAt(2)=='-'){
                          fSize=msg.substring(3);
                    }else{
                   content = new Vector<>();
                  pathfile=getpath(msg);
                    System.out.println("pr:"+pathfile);}
                  }
              else if(!msg.equals("~STOP")){
                    content.add(msg.substring(1));
   
              }else{
                    savefile(content);
                  try {
                        os.write("("+"Received file successfully!");os.newLine();
                        os.flush();
                         Document doc = txt.getDocument();
                        try {
                            doc.insertString(doc.getLength(), "\n"+sender+":"+"Received file successfully!", null);
                       } catch (BadLocationException ex) {
                             ex.printStackTrace();
                       }
                  } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e);
                  }      
              }
 }
    public boolean createFile(String Path,String FileName){
            boolean kt = true;
            try{
            File file = new File(Path+"\\"+FileName);
                  System.out.println("ddddddddddddđ:"+Path+"\\"+FileName);
            if(file.createNewFile())
            System.out.println("Success!");
            else{
                  int r = JOptionPane.showConfirmDialog(txt, "File ( "+FileName +" ) already exists, do you want to overwrite this file ( "+fSize+ " )?", "Error, file already exists!", JOptionPane.YES_NO_OPTION);
               if (r == JOptionPane.YES_OPTION) {
                     kt=true;
               }
               else if(r == JOptionPane.NO_OPTION) {
                    JOptionPane.showMessageDialog(txt, "Rename and save this file!");
                           kt=false;
               }
            }
        }
     catch(IOException ioe) {
        ioe.printStackTrace();
     }
            return kt;
      }
        
  public String getpath(String msg){
        String filename="";
       File file;
       String S="";
       String pathfile="";
           filename=msg.substring(2);
             int r;
             Document doc = txt.getDocument();
                                         try {
                                             doc.insertString(doc.getLength(), "\n"+receiver+" send File:"+filename+"!", null);
                                        } catch (BadLocationException ex) {
                                              ex.printStackTrace();
                                        }
            r = JOptionPane.showConfirmDialog(txt, "Do you want to receive file ( "+filename+" ) from "+receiver+" ("+fSize+")?", "File?", JOptionPane.YES_NO_OPTION);
            if (r == JOptionPane.YES_OPTION) {
                  try {
                                          os.write("~;");
                                          os.newLine();
                                          os.flush(); 
                                    } catch (Exception e) {
                                          JOptionPane.showMessageDialog(this, e);
                                    }
                  JFileChooser chooser = new JFileChooser(); 
                 chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
                 int path = chooser.showOpenDialog(getParent());
                  S = chooser.getSelectedFile().getPath();
                       System.out.println(S);
                  while(S.length()<=0){
                             path = chooser.showOpenDialog(getParent());
                              S = chooser.getSelectedFile().getPath();
                  }
                              if( createFile(S, filename)){
                                    pathfile=S+"\\"+filename;
                                    System.out.println("path:"+pathfile);
                              }else{
                                    rn.getC(S, filename);
                                    rn.setVisible(true);
                                    while(rn.isVisible()){
                                          rn.isVisible();
                                          System.out.println(rn.isVisible());
                                    }
                                    System.out.println("stop");
                                    filename=rn.FileName();
                                    pathfile=filename;
                                    System.out.println("path:"+pathfile);
                              }
            }else if(r == JOptionPane.NO_OPTION){
                                    doc = txt.getDocument();
                                         try {
                                             doc.insertString(doc.getLength(), "\n"+sender+": deny request! ", null);
                                        } catch (BadLocationException ex) {
                                              ex.printStackTrace();
                                        }
                                         try {
                                          os.write("~:"+" deny your request! ");
                                          os.newLine();
                                          os.flush(); 
                                    } catch (Exception e) {
                                          JOptionPane.showMessageDialog(this, e);
                                    }
            }
            return pathfile;
       }
  public void savefile(Vector content){
        PrintWriter pw =null;
                    String line="";
                       try {
                             System.out.println("cuoi:"+pathfile);
                             pw = new PrintWriter(pathfile);
                                          for(int i=0;i<content.size();i++)
                                {
                                       line = String.format("%s", content.get(i));
                                      pw.println(line);
                                      System.out.println(line);
                                }
                                          pw.close();
                      } 
                      catch (Exception e) 
                      {
                            JOptionPane.showMessageDialog(this, e);
                      }
  }
  
  public void sendfile(){
      String path = pfile.getText();
                            try{
                               File f;
                              f = new File(path);
                               if(!f.exists()) return;
                               FileReader fr = new FileReader(f);
                               BufferedReader br = new BufferedReader(fr);
                               String S;
                               while((S=br.readLine()) !=null){
                                     S=S.trim();
                                     if(S.length()>0)
                                     {
                                           System.out.println(S);
                                           try {
                                                os.write("["+S);
                                                os.newLine();
                                                os.flush(); 
                                          } catch (Exception e) {
                                                JOptionPane.showMessageDialog(this, e);
                                          }            
                                     }
                               }
                               br.close(); fr.close();
                               try {
                                                os.write("[STOP");
                                                os.newLine();
                                                os.flush(); 
                                          } catch (Exception e) {
                                                JOptionPane.showMessageDialog(this, e);
                                          }
                        }
                        catch (Exception e)
                        {
                              e.getStackTrace();
                        }    
            pfile.setText("");
            tn.setText("");
            ts.setText("");
}
  public void chooseFileCILENT(String msg) throws FileNotFoundException, IOException{

             System.out.println("choose file");
             PrintWriter pw =null;
              if(msg.charAt(2)==','){
                    if(msg.charAt(3)=='-'){
                          fSizeCILENT=msg.substring(4);
                    }else{
                   contentCILENT = new Vector<>();
                  pathfileCILENT=getpathCilent(msg);
                    System.out.println("pr:"+pathfileCILENT);}
                  }
              else if(("{"+posS+"STOP").equals(msg)){
                    System.out.println("save file");
                    savefileCILENT(contentCILENT);
                  try {
                        os.write(")"+posR+"Received file successfully!");os.newLine();
                        os.flush();
                         Document doc = View.getDocument();
                        try {
                            doc.insertString(doc.getLength(), "\n"+sender+":"+"Received file successfully!", null);
                       } catch (BadLocationException ex) {
                             ex.printStackTrace();
                       }
                  } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, e);
                  }
              }  else {
                    contentCILENT.add(msg.substring(2));
              }
 }
  
  public boolean createFileCILENT(String Path,String FileName){
            boolean kt = true;
            try{
            File file = new File(Path+"\\"+FileName);
                  System.out.println("ddddddddddddđ:"+Path+"\\"+FileName);
            if(file.createNewFile())
            System.out.println("Success!");
            else{
                  int r = JOptionPane.showConfirmDialog(View, "File ( "+FileName +" ) already exists, do you want to overwrite this file ( "+fSizeCILENT+ " )?", "Error, file already exists!", JOptionPane.YES_NO_OPTION);
               if (r == JOptionPane.YES_OPTION) {
                     kt=true;
               }
               else if(r == JOptionPane.NO_OPTION) {
                    JOptionPane.showMessageDialog(View, "Rename and save this file!");
                           kt=false;
               }
            }
        }
     catch(IOException ioe) {
        ioe.printStackTrace();
     }
            return kt;
      }
  public String getpathCilent(String msg){
        String filenameC="";
       File file;
       String S="";
       String pathfile="";
           filenameC=msg.substring(3);
             int r;
             Document doc = View.getDocument();
                                         try {
                                             doc.insertString(doc.getLength(), "\n"+receiver+" send File:"+filenameC+"!", null);
                                        } catch (BadLocationException ex) {
                                              ex.printStackTrace();
                                        }
            r = JOptionPane.showConfirmDialog(View, "Do you want to receive file ( "+filenameC+" ) from "+receiver+" ("+fSizeCILENT+")?", "File?", JOptionPane.YES_NO_OPTION);
            if (r == JOptionPane.YES_OPTION) {
                  try {
                                          os.write("]"+posR+";");
                                          os.newLine();
                                          os.flush(); 
                                    } catch (Exception e) {
                                          JOptionPane.showMessageDialog(this, e);
                                    }
                  JFileChooser chooser = new JFileChooser(); 
                 chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
                 int path = chooser.showOpenDialog(getParent());
                  S = chooser.getSelectedFile().getPath();
                 
                       System.out.println(S);
                  while(S.length()<=0){
                             path = chooser.showOpenDialog(getParent());
                              S = chooser.getSelectedFile().getPath();
                  }
                              if( createFileCILENT(S, filenameC)){
                                    pathfile=S+"\\"+filenameC;
                                    System.out.println("path:"+pathfile);
                              }else{
                                    rn.getC(S, filenameC);
                                    rn.setVisible(true);
                                    while(rn.isVisible()){
                                          rn.isVisible();
                                          System.out.println(rn.isVisible());
                                    }
                                    System.out.println("stop");
                                    filenameC=rn.FileName();
                                    pathfile=filenameC;
                                    System.out.println("path:"+pathfile);
                              }
            }else if(r == JOptionPane.NO_OPTION){
                                    doc = View.getDocument();
                                         try {
                                             doc.insertString(doc.getLength(), "\n"+sender+": deny request! ", null);
                                        } catch (BadLocationException ex) {
                                              ex.printStackTrace();
                                        }
                                         try {
                                          os.write("]"+posR+":"+" deny your request! ");
                                          os.newLine();
                                          os.flush(); 
                                    } catch (Exception e) {
                                          JOptionPane.showMessageDialog(this, e);
                                    }
            }
            return pathfile;
       }
  public void savefileCILENT(Vector content){
        PrintWriter pw =null;
                    String line="";
                       try {
                             System.out.println("cuoi:"+pathfileCILENT);
                             pw = new PrintWriter(pathfileCILENT);
                                          for(int i=0;i<content.size();i++)
                                {
                                       line = String.format("%s", content.get(i));
                                      pw.println(line);
                                      System.out.println(line);
                                }
                                          pw.close();
                      } 
                      catch (Exception e) 
                      {
                            JOptionPane.showMessageDialog(this, e);
                      }
  }
}
